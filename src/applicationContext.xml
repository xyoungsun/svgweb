<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- 定义数据源Bean，使用C3P0数据源实现 -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		 指定连接数据库的驱动
		<property name="driverClass" value="com.mysql.jdbc.Driver"/>
		指定连接数据库的URL
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/print"/>
		指定连接数据库的用户名
		<property name="user" value="root"/>
		指定连接数据库的密码
		<property name="password" value="root"/>
		指定连接数据库连接池的最大连接数
		<property name="maxPoolSize" value="20"/>
		指定连接数据库连接池的最小连接数
		<property name="minPoolSize" value="1"/>
		指定连接数据库连接池的初始化连接数
		<property name="initialPoolSize" value="1"/>
		指定连接数据库连接池的连接的最大空闲时间
		<property name="maxIdleTime" value="20"/>
	</bean>  -->
	
	<!--使用jboss中配置的数据源  -->
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
        <property name="jndiName"> 
            <value>java:/svgDS</value> 
        </property> 
    </bean>

    <!--定义了Hibernate的SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mappingResources">
            <list>
				<value>com/ceit/svg/entity/Graphic.hbm.xml</value>
				
			
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop>
                <prop key="show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.jdbc.batch_size">20</prop> 
            </props>
        </property>
    </bean>
    
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    


    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
	    <!--  事务拦截器bean需要依赖注入一个事务管理器 -->
        <property name="transactionManager" ref="transactionManager"/>
    	<property name="transactionAttributes">
		    <!--  下面定义事务传播属性-->
		    <props>
			    <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
		    	<prop key="*">PROPAGATION_REQUIRED</prop>
		    </props>
	    </property>
	</bean>

    <!-- 定义BeanNameAutoProxyCreator-->
    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
	    <!--  指定对满足哪些bean name的bean自动生成业务代理 -->
	    <property name="beanNames">
            <!--  下面是所有需要自动创建事务代理的bean-->
            <list>
                <value>graphicManager</value>
                <value>userManager</value>
                <value>mailManager</value>
                <value>deliverManager</value>
                <value>adjunctManager</value>
                <value>adminOrderManager</value>
            </list>
            <!--  此处可增加其他需要自动创建事务代理的bean-->
	    </property>
        <!--  下面定义BeanNameAutoProxyCreator所需的事务拦截器-->
        <property name="interceptorNames">
            <list>
                <!-- 此处可增加其他新的Interceptor -->
                <value>transactionInterceptor</value> 
            </list>
        </property>
    </bean>
    
    
    <bean id="graphicDao" class="com.ceit.svg.dao.GraphicDaoImpl">
    	<property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <bean id="graphicManager" class="com.ceit.svg.service.GraphicManagerImpl">
    	<property name="graphicDao" ref="graphicDao" />
    </bean>
    
   <!--  <bean id="orderDao" class="com.fivewood.print.dao.OrderDaoImpl">
    	<property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <bean id="orderManager" class="com.fivewood.print.service.OrderManagerImpl">
    	<property name="orderDao" ref="orderDao" />
    </bean>
    
    <bean id="adminOrderManager" class="com.fivewood.print.service.AdminOrderManagerImpl">
    	<property name="orderDao" ref="orderDao" />
    </bean>

    <bean id="userDao" class="com.fivewood.print.dao.UserDaoImpl">
    	<property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <bean id="userManager" class="com.fivewood.print.service.UserManagerImpl">
    	<property name="userDao" ref="userDao" />
    </bean>
    
    <bean id="mailDao" class="com.fivewood.print.dao.MailDaoImpl">
    	<property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
    <bean id="mailManager" class="com.fivewood.print.service.MailManagerImpl">
    	<property name="mailDao" ref="mailDao" />
    </bean>
    
    <bean id="deliverDao" class="com.fivewood.print.dao.DeliverDaoImpl">
    	<property name="sessionFactory" ref="sessionFactory" />
    </bean>
   
    <bean id="deliverManager" class="com.fivewood.print.service.DeliverManagerImpl">
    	<property name="deliverDao" ref="deliverDao" />
    </bean>
    
    <bean id="adjunctDao" class="com.fivewood.print.dao.AdjunctDaoImpl">
    	<property name="sessionFactory" ref="sessionFactory" />
    </bean>
   
    <bean id="adjunctManager" class="com.fivewood.print.service.AdjunctManagerImpl">
    	<property name="adjunctDao" ref="adjunctDao" />
    </bean>	-->

	
	
	
	
</beans>